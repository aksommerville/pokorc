Pocket Orchestra Song Format
It starts with MIDI, but we convert to a more digestible format at build time to save the Tiny some effort.

--- Combined Binary Format ---

Everything is in the native byte order; binary songs are not portable.
If you have to guess byte order: It is likely that one of the first two bytes is zero (ticks/beat, expect a low integer).
And beyond that, the rest of the header should add up to no more than the file size.

u16 frames per beat, reference rate 22050 hz -- for high-level tempo effects, eg dancer animation
u16 addl header, bytes. Pad to 4.
u16 song length, bytes. Pad to 4.
u16 fakesheet length, bytes. Pad to 4. (actually, it can only be multiple of 4 anyway)
... addl header
... song
... fakesheet

--- Binary Song Format ---

The song is a single stream of events, distinguishable by their first byte.
We have a hard-coded tick length: 96 Hz. This is the minimum addressable unit of time.

0xxxxxxx
  DELAY: x ticks
  
10000www 0nnnnnnn dddddddd
  NOTE_FIREFORGET: w waveid, n noteid, d duration ticks
  
11100www 0nnnnnnn
  NOTE_ON: w waveid, n noteid
  
11000www 0nnnnnnn
  NOTE_OFF: w waveid, n noteid
  
All other commands are reserved and illegal.

--- Binary Fakesheet Format ---

Fakesheet goes along with the song, it has the user input cues.

Stream of 32-bit integers:
  0xffff0000 time in ticks (s/96, same as song. overflows a bit over 11 minutes)
  0x0000f000 channel 0..4
  0x00000f00 waveid 0..7
  0x000000ff noteid 0..128
  
--- MIDI Format (Compile-Time) ---

Basically use MIDI as MIDI, I'm trying not to fight the format too hard.

The low three bits of Program ID select a wave 0..7.
The rest of Program ID is unused, reserved.

We don't use velocity as velocity, so we've hijacked it for use as the input cue:
  0x00..0x2f None
  0x30..0x3f Left
  0x40..0x4f Up
  0x50..0x5f Right
  0x60..0x6f B
  0x70..0x7f A
